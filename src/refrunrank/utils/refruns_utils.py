#!/usr/bin/env python
# coding: utf-8

# **Tools for retrieving a reference run for a given run**
#
# Preliminary implementation, based on a json file generated by the Tracker DQM group. Retrieved from [here](https://certhelper.web.cern.ch/mldatasets/allRunsRefRuns/) .
# Perhaps modify code later to fetch the up-to-date version at runtime instead of having to download a new version. Maybe also using an API to retrieve only the requested run instead of loading the entire file into memory.


### imports

# external modules
import os

# local modules
# import .json_utils as jsonu
# from .json_utils import loadjson


def get_reference(runnb, jsonlist=None, jsonfile="json_allRunsRefRuns.json"):
    """
    Fetches the reference run used for a given run number

    Args:
        runnb: run number
        jsonlist: list matching run numbers to reference run numbers
        jsonfile: path to json file matching run numbers to reference run number

    Returns:
        Integer representing the reference run that was used in the certification of the given run OR -1 if the given run is not in the json
    """

    if jsonlist is None:
        if not os.path.exists(jsonfile):
            raise Exception(
                "ERROR in refruns_utils.py / get_reference_run: file {} does not exist".format(
                    jsonfile
                )
            )
        jsonlist = loadjson(jsonfile)
        with open(jsonfile) as f:
            jsondict = json.load(f)

    return next(
        (
            item["reference_run_number"]
            for item in jsonlist
            if item["run_number"] == runnb
        ),
        -1,
    )

# Credit: Gabriele Benelli

import json
# CertHelperAPIJSONFilename="AllRunsRefRuns_Mar5_2024.json"
# RefRunsJSONFile=open(CertHelperAPIJSONFilename, 'r')
# RefRunsJSON=json.load(RefRunsJSONFile)
class RefRunsClass:
    """Creating a simple class to organize the Reference Runs information from the CertHelper API"""
    def __init__(self, JSONFilename):
        """Reading in the list of dictionaries in the "JSON" produced by the CertHelper API: e.g.  {"run_number": 306584, "run_reconstruction_type": "rereco", "reference_run_number": 305810, "reference_run_reconstruction_type": "express", "dataset": "/SingleTrack/Run2017G-17Nov2017-v1/DQMIO"}"""
        #self.JSONFilename=JSONFilename
        self.JSONFile=open(JSONFilename,'r')
        self.JSON=json.load(self.JSONFile)
        self.AllRunsByYear={}
    def getListOfRuns(self,type='all'):
        """Processing the data in the "JSON" to produce the interesting lists of runs"""
        if type=='all':
            self.AllRuns=[]
            for entry in self.JSON:
                runNumber=entry['run_number']
                self.AllRuns.append(runNumber) #Add all entries in this list, do more (cleaning/filtering) operations later
                #if runNumber not in self.AllRuns:
                #    self.AllRuns.append(runNumber)
            return self.AllRuns
        if type in ['2016','2017','2018','2022','2023','2024']:
            self.AllRunsByYear[type]=[]
            for entry in self.JSON:
                #print(type)
                #print(entry['run_number'])
                #print(entry['dataset'])
                #Found that we have some dataset set to None, breaking the code, so catching the issue:
                if isinstance(entry['dataset'],str):
                    if type in entry['dataset']:
                        runNumber=entry['run_number']
                        self.AllRunsByYear[type].append(runNumber) #Add all entries in this list, do more (cleaning/filtering) operations later
                else:
                    print("The following entry does not have a dataset string in the input JSON!")
                    print(entry)
            return self.AllRunsByYear[type]

    def getInfoForRun(self, runNumber):
        """Quick function to dump information in the JSON about a given run"""
        self.getListOfRuns()
        if int(runNumber) not in self.AllRuns:
            print("Sorry run %s was not found in the currently loaded JSON file %s"%(runNumber,self.JSONFilename))
            #return self.AllRuns
            return
        else:
            entries=[]
            for entry in self.JSON:
                if entry['run_number']==int(runNumber):
                    print(entry)
                    entries.append(entry)
            return entries